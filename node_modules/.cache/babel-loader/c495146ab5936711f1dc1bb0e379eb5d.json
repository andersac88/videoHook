{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport youtube from \"../apis/youtube\";\nconst KEY = \"AIzaSyDE5PA9LDLdkAzAnyWYSb1Ahp84zuoZqG4\";\n\nconst useVideos = defaultSearchTerm => {\n  const [videos, setVideo] = useState([]);\n  useEffect(() => {\n    search(defaultSearchTerm);\n  }, [defaultSearchTerm]);\n\n  const search = async term => {\n    const response = await youtube.get(\"/search\", {\n      params: {\n        q: term,\n        type: \"video\",\n        part: \"snippet\",\n        maxResults: 5,\n        key: KEY\n      }\n    });\n    setVideo(response.data.items);\n  };\n\n  return [videos, search];\n};\n\nexport default useVideos;","map":{"version":3,"sources":["/Users/andrewandersen/Desktop/Web Dev/hooks-practice/src/hooks/useVideos.js"],"names":["useState","useEffect","youtube","KEY","useVideos","defaultSearchTerm","videos","setVideo","search","term","response","get","params","q","type","part","maxResults","key","data","items"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAGA,MAAMC,GAAG,GAAG,yCAAZ;;AACA,MAAMC,SAAS,GAAIC,iBAAD,IAAuB;AACxC,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBP,QAAQ,CAAC,EAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfO,IAAAA,MAAM,CAACH,iBAAD,CAAN;AACA,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;;AAIA,QAAMG,MAAM,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAMC,QAAQ,GAAG,MAAMR,OAAO,CAACS,GAAR,CAAY,SAAZ,EAAuB;AAC7CC,MAAAA,MAAM,EAAE;AACPC,QAAAA,CAAC,EAAEJ,IADI;AAEPK,QAAAA,IAAI,EAAE,OAFC;AAGPC,QAAAA,IAAI,EAAE,SAHC;AAIPC,QAAAA,UAAU,EAAE,CAJL;AAKPC,QAAAA,GAAG,EAAEd;AALE;AADqC,KAAvB,CAAvB;AASAI,IAAAA,QAAQ,CAACG,QAAQ,CAACQ,IAAT,CAAcC,KAAf,CAAR;AACA,GAXD;;AAaA,SAAO,CAACb,MAAD,EAASE,MAAT,CAAP;AACA,CArBD;;AAuBA,eAAeJ,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport youtube from \"../apis/youtube\";\n\n\nconst KEY = \"AIzaSyDE5PA9LDLdkAzAnyWYSb1Ahp84zuoZqG4\";\nconst useVideos = (defaultSearchTerm) => {\n\tconst [videos, setVideo] = useState([]);\n\n\tuseEffect(() => {\n\t\tsearch(defaultSearchTerm);\n\t}, [defaultSearchTerm]);\n\n\tconst search = async (term) => {\n\t\tconst response = await youtube.get(\"/search\", {\n\t\t\tparams: {\n\t\t\t\tq: term,\n\t\t\t\ttype: \"video\",\n\t\t\t\tpart: \"snippet\",\n\t\t\t\tmaxResults: 5,\n\t\t\t\tkey: KEY,\n\t\t\t},\n\t\t});\n\t\tsetVideo(response.data.items);\n\t};\n\n\treturn [videos, search];\n};\n\nexport default useVideos;\n"]},"metadata":{},"sourceType":"module"}